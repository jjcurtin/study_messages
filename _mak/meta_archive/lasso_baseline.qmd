---
title: "Lasso for baseline feature selection"
author: "Kendra Wyant"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

This script fits a lasso model to select a set of baseline features related to lapse. This subset of features can then be added to meta/messages features.

## Set Up


```{r}
#| message: false

library(tidyverse)
library(tidymodels)
theme_set(theme_classic()) 

source("https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true")

path_shared <- format_path(str_c("risk/data_processed/shared"))
path_messages <- format_path(str_c("risk/data_processed/messages")) 
```

## Read in data
```{r}
study_dates <- read_csv(here::here(path_shared, "study_dates_messages.csv"),
                  show_col_types = FALSE)

baseline <- read_csv(here::here(path_shared, "features_baseline.csv"),
                  show_col_types = FALSE) |> 
  filter(subid %in% study_dates$subid) |> 
  # select scaled and other scores not in raw data
  select(subid, days_abstinent, dsm5_total:efficacy_craving, stress_total:social_support_so)

intake <- read_csv(here::here(path_shared, "intake.csv"),
                  show_col_types = FALSE) |> 
  filter(subid %in% study_dates$subid) |> 
  select(-c(2:6))

screen <- read_csv(here::here(path_shared, "screen.csv"),
                  show_col_types = FALSE) |> 
  filter(subid %in% study_dates$subid) |> 
  select(-c(2:6), -starts_with("mps_"), -starts_with("auh_8"))

feats <- baseline |> 
  left_join(intake, by = "subid") |> 
  left_join(screen, by = "subid")

labels <- read_csv(here::here(path_shared, "labels_messages_day_24h.csv"),
                  show_col_types = FALSE) |> 
  select(-c(day_start, day_end)) |> 
  mutate(lapse = factor(lapse, levels = c("lapse", "no lapse")))

strat <- read_csv(here::here(path_shared, "strat_lh.csv"),
                  show_col_types = FALSE)
```


Remove feats with more than 10% missing data
```{r}
feats_missing <- naniar::miss_var_summary(feats) |> 
  filter(pct_miss > 10) |> 
  pull(variable)

feats <- feats |> 
  select(-c(contains(feats_missing)))
```

Add outcome and strat var
```{r}
data <- labels |> 
  left_join(feats, by = "subid") |> 
  left_join(strat, by = "subid")
```


Convert string variables to factor
```{r}
data <- data |> 
  mutate(across(where(is.character), ~factor(.x))) |> 
  rename(y = lapse)
```



## Fit LASSO

Recipe
```{r}
rec <- recipe(y ~ ., data = data) |> 
  step_rm(subid, dttm_label, strat) |> 
  step_zv(all_predictors()) |> 
  step_impute_median(all_numeric_predictors()) |> 
  step_impute_mode(all_nominal_predictors()) |> 
  step_dummy(all_nominal_predictors()) |> 
  step_nzv(all_predictors()) |> 
  step_normalize(all_predictors())
   
```

Splits
```{r}
set.seed(102030)
splits <- group_vfold_cv(data, v = 5, group = "subid", strata = strat)
```

Fit models
```{r}
tune_grid <- expand.grid(penalty = 10^seq(-4, 0, length = 50),
                            mixture = seq(.5, 1, length = 5))

models <- logistic_reg(penalty = tune(),
                       mixture = tune()) |> 
        set_engine("glmnet") |> 
        set_mode("classification") |> 
        tune_grid(preprocessor = rec,
                  resamples = splits,
                  grid = tune_grid,
                  metrics = metric_set(roc_auc))
```

Get best lambda and alpha
```{r}
best_model <- select_best(models, metric = "roc_auc")

show_best(models, metric = "roc_auc")
```

Fit final model 
```{r}
rec_prepped <- rec |> 
    prep(training = data)

feat_all <- rec_prepped |> 
    bake(new_data = data)

fit_best <- logistic_reg(penalty = best_model$penalty,
                         mixture = best_model$mixture) |> 
        set_engine("glmnet") |> 
        set_mode("classification") |> 
        fit(y ~ ., data = feat_all)
```

of 1121 features, 47 were retained
```{r}
tidy(fit_best) |> 
  filter(term != "(Intercept)", estimate != 0) |> 
  nrow()
```
 
8 features have estimates > |.1|

```{r}
tidy(fit_best) |> 
  filter(term != "(Intercept)", estimate != 0) |> 
  arrange(desc(abs(estimate))) |> 
  filter(abs(estimate) > .1) |> 
  print(n = Inf)
```

save out best features  

- yap_1 - Have you driven a car when you knew you had too much to drink to drive safely? (lifetime endorsement and past year frequency)
- mam_23 - In the next 30 days, how confident are you in your ability to be completely abstinent from alcohol?
- dass21_15 - In the past month, I felt I was close to panic.
- mspss_1 - There is a special person who is around when I am in need.
- mam_22 - Is your goal still to remain abstinent in the future?
- yap_13 - Have you ever neglected your obligations, your family, your work, or school work for two or more days in a row because of your drinking? 
- qol_13 - How satisfied are you with the conditions of your neighborhood?
- fad_38 - We [my family] resolve most emotional upsets that come up. 

```{r}
feats_retained <- tidy(fit_best) |> 
  filter(term != "(Intercept)", estimate != 0) |> 
  filter(abs(estimate) > .1) |> 
  mutate(term = str_replace(term, "_[^_]+$", "")) |> 
  pull(term)

data <- data |> 
  select(subid, 
         all_of(feats_retained)) |> 
  unique()

(missing_features <- setdiff(feats_retained, colnames(data)))

data |> 
  write_csv(here::here(path_messages, "features_meta_day_24h_v6_baseline.csv"))
```


