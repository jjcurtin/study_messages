{
  "hash": "ccc98f23dd82dca4f4638f0dfaaf9cd1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generate INNER calibration\"\nauthor: \"John Curtin & Claire Punturieri\"\ndate: \"2024-12-03\"\noutput: \n  html_document:\n    toc: true \n    toc_depth: 4\nformat:\n  html:\n    embed-resources: true\nparams:\n  study: \"messages\"\n  version: \"v1\"\n  cv: \"nested_1_x_10_3_x_10\"\n  algorithms: \"xgboost\"   # \"all\" or name of specific algorithm\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nstudy <- params$study\ncv <- params$cv\nalgorithms <- params$algorithms\nversion <- params$version\n```\n:::\n\n\nFunction conflicts\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\n# source\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nℹ SHA-1 hash of file is \"77e91675366f10788c6bcb59fa1cfc9ee0c75281\"\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\ndevtools::source_url(\"https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nℹ SHA-1 hash of file is \"a58e57da996d1b70bb9a5b58241325d6fd78890f\"\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\n# handle conflicts\noptions(conflicts.policy = \"depends.ok\")\ntidymodels_conflictRules()\n```\n:::\n\n\nPackages for script\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::%||%()   masks base::%||%()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\nlibrary(tidymodels)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.5      ✔ rsample      1.2.1 \n✔ dials        1.2.1      ✔ tune         1.2.1 \n✔ infer        1.0.7      ✔ workflows    1.1.4 \n✔ modeldata    1.3.0      ✔ workflowsets 1.1.0 \n✔ parsnip      1.2.1      ✔ yardstick    1.3.1 \n✔ recipes      1.0.10     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ purrr::%||%()     masks base::%||%()\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n#| message: false\n#| warning: false\n\nlibrary(probably)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'probably'\n\nThe following objects are masked from 'package:base':\n\n    as.factor, as.ordered\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\npath_models <- format_path(str_c(\"studydata/risk/models/\", study))\n```\n:::\n\n\n\nPath\n\n## Functions\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nget_brier <- function(split, df){\n  \n  #filter to split\n  probs_split <- df |> \n    filter(split_num == split)\n\n  raw <- probs_split |>\n    filter(method == \"prob_raw\") |> \n    brier_class(label, .pred_Lapse)\n  \n  logi <- probs_split |>\n    filter(method == \"prob_logi\") |> \n    brier_class(label, .pred_Lapse)\n  \n  iso <- probs_split |>\n    filter(method == \"prob_iso\") |> \n    brier_class(label, .pred_Lapse)\n  \n  #beta <- probs_split |>\n    #filter(method == \"prob_beta\") |> \n    #brier_class(label, .pred_Lapse)\n  \n  brier <- tibble(raw = raw$.estimate, \n                 logi = logi$.estimate, \n                 iso = iso$.estimate) \n  #               beta = beta$.estimate)\n  \n  #brier <- tibble(raw = raw$.estimate)\n  \n  return(brier)\n}\n```\n:::\n\n\n## Get Probs\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nprobs <- read_rds(here::here(path_models, str_c(\"inner_preds_\", version, \"_\", cv, \".rds\"))) |> \n  mutate(split_num = 10 * outer_split_num + (inner_split_num - 10)) |> \n  pivot_longer(cols = starts_with(\"prob\"), \n               names_to = \"method\", \n               values_to = \".pred_Lapse\") |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 936,522\nColumns: 7\n$ id_obs          <int> 602, 602, 602, 603, 603, 603, 604, 604, 604, 605, 605,…\n$ outer_split_num <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ inner_split_num <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ label           <fct> no lapse, no lapse, no lapse, no lapse, no lapse, no l…\n$ split_num       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ method          <chr> \"prob_raw\", \"prob_iso\", \"prob_logi\", \"prob_raw\", \"prob…\n$ .pred_Lapse     <dbl> 0.50047201, 0.07657658, 0.09117982, 0.49951923, 0.0765…\n```\n\n\n:::\n:::\n\n\n## Brier Scores\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nbrier <- 1:300 |>\n  map(\\(split_num) get_brier(split_num, probs)) |> \n  list_rbind()\n\nbrier |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n    raw   logi    iso\n  <dbl>  <dbl>  <dbl>\n1 0.250 0.0578 0.0578\n2 0.250 0.0287 0.0268\n3 0.250 0.0578 0.0549\n4 0.249 0.0647 0.0588\n5 0.249 0.107  0.109 \n6 0.250 0.0758 0.0766\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nbrier |> summarize(across(everything(), list(mean, median)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n  raw_1 raw_2 logi_1 logi_2  iso_1  iso_2\n  <dbl> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 0.250 0.250 0.0723 0.0689 0.0736 0.0690\n```\n\n\n:::\n:::\n\n\n## Explore Plots\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nprobs |>\n  mutate(.pred_lapse = .pred_Lapse) |> \n  cal_plot_breaks(truth = label, \n                  estimate = .pred_lapse,\n                  .by = method)\n```\n\n::: {.cell-output-display}\n![](fig_calibration_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code .hidden}\nprobs |>\n  mutate(.pred_lapse = .pred_Lapse) |> \n  filter(outer_split_num == 1) |> \n  cal_plot_windowed(truth = label, \n                  estimate = .pred_lapse,\n                  .by = method)\n```\n\n::: {.cell-output-display}\n![](fig_calibration_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::",
    "supporting": [
      "fig_calibration_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}