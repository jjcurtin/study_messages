---
title: "Subgroup Analysis"
author: "Coco Yu"
date: "`r lubridate::today()`"
output: 
  html_document:
    toc: true 
    toc_depth: 4
format:
  html:
    embed-resources: true
params:
  study: "messages"
  version: "v1"
  cv: "nested_1_x_10_3_x_10"
  algorithms: "xgboost"   # "all" or name of specific algorithm
editor_options: 
  chunk_output_type: console
---

# Housekeeping

## Code status

## Notes


# Set Up

## Set Up Environment

### Study parameters
```{r}
study <- params$study
cv <- params$cv
algorithms <- params$algorithms
version <- params$version
```

### Defaults
```{r}
#| message: false
#| warning: false

# handle conflicts
options(conflicts.policy = "depends.ok")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_ml.R?raw=true")
devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/fun_eda.R?raw=true")
tidymodels_conflictRules()

knitr::opts_chunk$set(attr.output='style="max-height: 500px;"')

options(tibble.width = Inf)
options(tibble.print_max = Inf)
```

### Packages for script
```{r}
#| message: false
#| warning: false

library(tidyverse)
library(tidyposterior)
library(tidymodels)
library(yardstick)
library(here)

theme_set(theme_classic())

devtools::source_url("https://github.com/jjcurtin/lab_support/blob/main/format_path.R?raw=true")
```


### Absolute paths
```{r}
path_models <- format_path(str_c("studydata/risk/models/", study))
path_messages <- format_path(str_c("studydata/risk/data_processed/messages"))
path_shared <- format_path(str_c("studydata/risk/data_processed/shared"))
```

## Data Cleaning

Read in Data
```{r}
probs <- 
  read_rds(here::here(path_models, str_c("inner_preds_", version, "_", cv, ".rds"))) |> 
  glimpse()

labels <- read_csv(here::here(path_messages, "lapses.csv"), col_types = cols()) |> 
  mutate(day_start = as_datetime(day_start, tz = "America/Chicago"),
         day_end = as_datetime(day_end, tz = "America/Chicago"))

labels$id_obs <- 1: nrow(labels)

screen <- read_csv(here::here(path_shared, "screen.csv"),
                   col_types = cols()) |>
  select(c(starts_with("dem"), subid)) |> 
  glimpse()
```

Find demographic groups
```{r}
demographics <- labels |> 
  left_join(screen, by = "subid") |> 
  select(-day_start, -day_end, -lapse) |> 
  distinct() |> 
  mutate(
    race = case_when(
      dem_3 == "White/Caucasian" & grepl("No", dem_4) ~ "white",
      dem_3 != "White/Caucasian" | grepl("Yes", dem_4) ~ "non_white"),
    sex = if_else(dem_2 == "Female", "female", "male"),
    age = if_else(dem_1 >= 55, "older", "younger"),
    income = if_else(dem_7 <= .5 * 30000, "below_poverty", "above_poverty")
  ) |> 
  select(-starts_with("dem")) |> 
  glimpse()
```

```{r}
probs <- probs |> 
  left_join(demographics, by = "id_obs")
```

### Calculate auROC

```{r}
auroc_all <- probs |> 
  group_by(inner_split_num, outer_split_num) |> 
  summarize(auroc = roc_auc_vec(truth = label, estimate = prob_raw))
```

```{r}
auroc_race <- probs |> 
  group_by(inner_split_num, outer_split_num, race) |> 
  summarize(auroc = roc_auc_vec(truth = label, estimate = prob_raw)) |> 
  ungroup() |> 
  bind_rows(auroc_all |> mutate(race = "all")) |> 
  rename(subgroup = race)

auroc_sex <- probs |> 
  group_by(inner_split_num, outer_split_num, sex) |> 
  summarize(auroc = roc_auc_vec(truth = label, estimate = prob_raw)) |> 
  ungroup() |> 
  bind_rows(auroc_all |> mutate(sex = "all")) |> 
  rename(subgroup = sex)

auroc_age <- probs |> 
  group_by(inner_split_num, outer_split_num, age) |> 
  summarize(auroc = roc_auc_vec(truth = label, estimate = prob_raw)) |>
  ungroup() |> 
  bind_rows(auroc_all |> mutate(age = "all")) |> 
  rename(subgroup = age)

auroc_income <- probs |> 
  group_by(inner_split_num, outer_split_num, income) |> 
  summarize(auroc = roc_auc_vec(truth = label, estimate = prob_raw)) |>
  ungroup() |> 
  bind_rows(auroc_all |> mutate(income = "all")) |> 
  rename(subgroup = income)
```

## Build Model

```{r}
bayes_model <- function(df){
  df |> 
    filter(subgroup != "all") |>
    select(c("auroc", "subgroup", "inner_split_num", "outer_split_num")) |> 
    group_by(subgroup) |>
    mutate(repeat_num = inner_split_num,
           fold_num = outer_split_num) |> 
    select(c("auroc", "subgroup", "repeat_num", "fold_num")) |>
    pivot_wider(values_from = c("auroc"), names_from = subgroup) |>
    rename(id = repeat_num, id2 = fold_num) |>
    perf_mod(formula = statistic ~ model + (1 | id2/id),
             # prior_intercept = rstanarm::student_t(autoscale = TRUE),
             # prior = rstanarm::student_t(autoscale = TRUE),
             # transform = tidyposterior::logit_trans,  # for skewed & bounded AUC
             iter = 12000, chains = 4,
             adapt_delta = .99,
             # cores = 4, seed = 12345,
             family = gaussian, verbose = FALSE)
}

bayes_output <- function(pp){
  pp |>
  tidy(seed = 123) |>
  group_by(model) |> 
  summarize(median = quantile(posterior, probs = .5),
            lower = quantile(posterior, probs = .025), 
            upper = quantile(posterior, probs = .975))
}
```


```{r}
if (file.exists(here(path_messages, "pp", "pp_race.rds"))){
  pp_race <- read_rds(here(path_messages, "pp", "pp_race.rds"))
} else{
  pp_race <- bayes_model(auroc_race)
  pp_race |> write_rds(here(path_messages, "pp", "pp_auroc.rds"))
}

if (file.exists(here(path_messages, "pp", "pp_sex.rds"))){
  pp_sex <- read_rds(here(path_messages, "pp", "pp_sex.rds"))
} else{
  pp_sex <- bayes_model(auroc_sex)
  pp_sex |> write_rds(here(path_messages, "pp", "pp_sex.rds"))
}

if (file.exists(here(path_messages, "pp", "pp_age.rds"))){
  pp_age <- read_rds(here(path_messages, "pp", "pp_age.rds"))
} else{
  pp_age <- bayes_model(auroc_age)
  pp_age |> write_rds(here(path_messages, "pp", "pp_age.rds"))
}

if (file.exists(here(path_messages, "pp", "pp_income.rds"))){
  pp_income <- read_rds(here(path_messages, "pp", "pp_income.rds"))
} else{
  pp_income <- bayes_model(auroc_income)
  pp_income |> write_rds(here(path_messages, "pp", "pp_income.rds"))
}
```

## Plot

```{r}
#| label: fig-fairness
#| fig-cap: "auROC posterior distribution across different privileged vs. unprivileged groups"

ggpubr::ggarrange(
  bayes_output(pp_race) |> 
    ggplot(aes(y = factor(model, levels = c("non_white", "white")), 
               x = median, color = model)) + 
    geom_point() +
    geom_errorbar(aes(xmin = lower, xmax = upper), width = .2) +
    scale_color_manual(values = c("#F28072", "#B5D66E")) +
    labs(x = "auROC", y = element_blank(), title = "Race") +
    scale_x_continuous(limits = c(0.46, 0.56), 
                       breaks = seq(0.46, 0.58, by = 0.02)) +
    theme(legend.position = "none"),
  bayes_output(pp_sex) |> 
    ggplot(aes(y = factor(model, levels = c("female", "male")), 
               x = median, color = model)) + 
    geom_point() +
    geom_errorbar(aes(xmin = lower, xmax = upper), width = .2) +
    scale_color_manual(values = c("#F28072", "#B5D66E")) +
    labs(x = "auROC", y = element_blank(), title = "Sex") +
    scale_x_continuous(limits = c(0.46, 0.56), 
                       breaks = seq(0.46, 0.58, by = 0.02)) +
    theme(legend.position = "none"),
  bayes_output(pp_age) |> 
    ggplot(aes(y = factor(model, levels = c("older", "younger")), 
               x = median, color = model)) + 
    geom_point() +
    geom_errorbar(aes(xmin = lower, xmax = upper), width = .2) +
    scale_color_manual(values = c("#F28072", "#B5D66E")) +
    labs(x = "auROC", y = element_blank(), title = "Age") +
    scale_x_continuous(limits = c(0.46, 0.56), 
                       breaks = seq(0.46, 0.58, by = 0.02)) +
    theme(legend.position = "none"),
  bayes_output(pp_income) |> 
    ggplot(aes(y = factor(model, levels = c("below_poverty", "above_poverty")), 
               x = median, color = model)) + 
    geom_point() +
    geom_errorbar(aes(xmin = lower, xmax = upper), width = .2) +
    scale_color_manual(values = c("#B5D66E", "#F28072")) +
    labs(x = "auROC", y = element_blank(), title = "Income") +
    scale_x_continuous(limits = c(0.46, 0.56), 
                       breaks = seq(0.46, 0.58, by = 0.02)) +
    theme(legend.position = "none")
)
```

## Model Comparison

```{r}
pp_race |> 
  contrast_models("white", "non_white") |>
  summarize(
    median = quantile(difference, probs = .5),
    lower = quantile(difference, probs = .025), 
    upper = quantile(difference, probs = .975),
    prob = mean(difference > 0)
    ) |> 
  mutate(group = "white vs. non_white") |> 
  relocate(group) |> 
  bind_rows(
    pp_sex |> 
      contrast_models("male", "female") |>
      summarize(
        median = quantile(difference, probs = .5),
        lower = quantile(difference, probs = .025), 
        upper = quantile(difference, probs = .975),
        prob = mean(difference > 0)
        ) |> 
      mutate(group = "male vs. female") |> 
      relocate(group)
  ) |> 
  bind_rows(
    pp_age |> 
      contrast_models("younger", "older") |>
      summarize(
        median = quantile(difference, probs = .5),
        lower = quantile(difference, probs = .025), 
        upper = quantile(difference, probs = .975),
        prob = mean(difference > 0)
        ) |> 
      mutate(group = "younger vs. older") |> 
      relocate(group)
  ) |> 
  bind_rows(
    pp_income |> 
      contrast_models("above_poverty", "below_poverty") |>
      summarize(
        median = quantile(difference, probs = .5),
        lower = quantile(difference, probs = .025), 
        upper = quantile(difference, probs = .975),
        prob = mean(difference > 0)
        ) |> 
      mutate(group = "above_poverty vs. below_poverty") |> 
      relocate(group)
  ) |> 
  write_csv("objects/subgroup_comparison.csv")
```

